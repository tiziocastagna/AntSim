class Vector2D {
    x;
    y;
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    add(other) {
        this.x += other.x;
        this.y += other.y;
    }
}

class SquareMatrix2D {
    constructor(a, b, c, d) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d
    }
    transform(v) {
        return new Vector2D(v.x * this.a + v.y * this.c, v.x * this.b + v.y * this.d);
    }
}

function vector2Daddtion(v, w) {
    return new Vector2D(v.x + w.x, v.y + w.y);
}

const ROTATION_90 = new SquareMatrix2D(0, 1, -1, 0);
const ROTATION_180 = new SquareMatrix2D(-1, 0, 0, -1);
const ROTATION_270 = new SquareMatrix2D(0, -1, 1, 0);

const NORTH = new Vector2D(0, 1);
const EAST = new Vector2D(1, 0);
const SOUTH = new Vector2D(0, -1);
const WEST = new Vector2D(-1, 0);

const directions = [
    NORTH,
    EAST,
    SOUTH,
    WEST
];

function getRandomDirection() {
    const randomIndex = Math.floor(Math.random() * directions.length);
    return directions[randomIndex];
}

// Helper function for shuffling an array in place (Fisher-Yates)
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]]; // Swap elements
    }
}

let food_home = 0;

const BRAIN_STRUCTURE = [
    {type: "normal", input_size: 18, output_size: 4},
    {type: "Blayer", input_size: 4, output_size: 30},
    {type: "Blayer", input_size: 30, output_size: 16},
    {type: "Blayer", input_size: 16, output_size: 4},
    {type: "normal", input_size: 4, output_size: 14}
];
let NOISE_IN_MULTIPLIER = 0;
let NOISE_OUT_MULTIPLIER = 0;

class Ant {
    position;
    home;
    hill;
    direction;

    food_carried;
    energy;
    alive;

    brain;
    constructor(hill) {
        this.hill = hill;
        this.home = hill.position;
        this.position = new Vector2D(this.home.x, this.home.y);
        this.home = new Vector2D(this.home.x, this.home.y);
        this.direction = getRandomDirection();
        getTile(this.position.x, this.position.y).ant_number += 1;     // Show itself as soon as it is created

        this.food_carried = 0;
        this.energy = 2000;
        this.alive = true;

        this.brain = new CrossNetwork(BRAIN_STRUCTURE);
    }
    getLeftTile() {
        const position = vector2Daddtion(this.position, ROTATION_270.transform(this.direction));
        return getTile(position.x, position.y);
    }
    getRightTile() {
        const position = vector2Daddtion(this.position, ROTATION_90.transform(this.direction));
        return getTile(position.x, position.y);
    }
    getFrontTile() {
        const position = vector2Daddtion(this.position, this.direction);
        return getTile(position.x, position.y);
    }
    
    move(direction) {
        if(this.alive === false) { return; }
        let next_direction;
        if(direction === "left") {
            next_direction = ROTATION_270.transform(this.direction);
        } else if(direction === "right") {
            next_direction = ROTATION_90.transform(this.direction);
        } else if(direction === "forwards") {
            next_direction = this.direction;
        } else {    // TODO: do somthing
            return;
        }

        const next_position = vector2Daddtion(this.position, next_direction);
        const next_tile = getTile(next_position.x, next_position.y);

        const prevX = this.position.x;
        const prevY = this.position.y;

        if(next_tile !== VOIDTILE) {
            getTile(prevX, prevY).ant_number -= 1;      // Removes itself
            this.position = next_position;
            this.direction = next_direction;
            getTile(next_position.x, next_position.y).ant_number += 1;     // Shows itself
        } else {
            // DO NOTHING
        }
    }

    getDirectionPreferences(channel, preference_type, leftTile, frontTile, rightTile) {
        let Values = [ // Use let as we will modify it by shuffling parts
            { direction: "left", value: leftTile.chemicalRGB[channel] },
            { direction: "forwards", value: frontTile.chemicalRGB[channel] },
            { direction: "right", value: rightTile.chemicalRGB[channel]}
        ];
 
        if (preference_type === "avoid") {
            // Sort by chemical value ascending (lower is better)
            Values.sort((a, b) => a.value - b.value);
        } else if (preference_type === "follow") {
            // Sort by chemical value descending (higher is better)
            Values.sort((a, b) => b.value - a.value);
        }
 
        // Shuffle groups with tied values to ensure random choice among equally good options
        let i = 0;
        while (i < Values.length) {
            let j = i;
            // Find end of the current tied group (elements with the same value)
            while (j < Values.length && Values[j].value === Values[i].value) {
                j++;
            }
            // If there's a group of more than one item with the same value
            if (j - i > 1) {
                const tiedGroup = Values.slice(i, j);
                shuffleArray(tiedGroup); // Shuffle this specific group
                // Place the shuffled group back into the Values array
                for (let k = 0; k < tiedGroup.length; k++) {
                    Values[i + k] = tiedGroup[k];
                }
            }
            i = j; // Move to the start of the next distinct group
        }
        return Values.map(item => item.direction);
    }

    reachForFood(tile) {
        if(tile.food_channel > 0 && this.food_carried < 255) {
            const FoodThatCanBePickedUp = tile.food_channel > 100 ? 100 : tile.food_channel;
            this.food_carried += FoodThatCanBePickedUp;
            this.energy += FoodThatCanBePickedUp * 0.1;
            tile.removeFood(FoodThatCanBePickedUp);
        }
    }

    home_beavieur() {
        if(this.food_carried > 0) {
            food_home += this.food_carried;
            if(this.food_carried > 5) {
                this.makeOffspring();
                console.log("food: ", this.food_carried);
                for(let i = 0; i < Math.floor(this.food_carried / 5); i++) {
                    this.makeOffspring();
                }
                this.food_carried = 0;
            }
        }
    }

    turn_back() {
        this.direction = ROTATION_180.transform(this.direction);
    }

    turn_left() {
        this.direction = ROTATION_270.transform(this.direction);
    }

    turn_right() {
        this.direction = ROTATION_90.transform(this.direction);
    }

    explore(tile, leftTile, frontTile, rightTile) {
        tile.addChemical(0, 10);
        this.move(this.getDirectionPreferences(0, "avoid", leftTile, frontTile, rightTile)[0]);
    }

    step() {
        if(this.alive === false) { return; }
        const tile = getTile(this.position.x, this.position.y);
        const frontTile = this.getFrontTile();
        const leftTile = this.getLeftTile();
        const rightTile = this.getRightTile();

        if(this.position.x === this.home.x && this.position.y === this.home.y) { this.home_beavieur(); }
        this.reachForFood(tile);

        const INPUTS = [
            this.food_carried > 0 ? 1 : 0,
            tile.food_channel / 255,
            tile.chemicalRGB[0] / 255,
            tile.chemicalRGB[1] / 255,
            tile.chemicalRGB[2] / 255,
            frontTile.food_channel / 255,
            frontTile.chemicalRGB[0] / 255,
            frontTile.chemicalRGB[1] / 255,
            frontTile.chemicalRGB[2] / 255,
            leftTile.food_channel / 255,
            leftTile.chemicalRGB[0] / 255,
            leftTile.chemicalRGB[1] / 255,
            leftTile.chemicalRGB[2] / 255,
            rightTile.food_channel / 255,
            rightTile.chemicalRGB[0] / 255,
            rightTile.chemicalRGB[1] / 255,
            rightTile.chemicalRGB[2] / 255,
            this.food_carried / 255
        ];

        // Add noise to the input vector
        for (let i = 0; i < INPUTS.length; i++) {
            INPUTS[i] += (Math.random() * 2 - 1) * NOISE_IN_MULTIPLIER;
        }

        const OUTPUT = this.brain.feedForward(INPUTS);

        // Add noise to the output vector
        for (let i = 0; i < OUTPUT.length; i++) {
            OUTPUT[i] += (Math.random() * 2 - 1) * NOISE_OUT_MULTIPLIER;
        }

        let maxIndex = 0;
        for (let i = 1; i < OUTPUT.length; i++) {
            if (OUTPUT[i] > OUTPUT[maxIndex]) {
                maxIndex = i;
            }
        }
        if(maxIndex === 0) {
            this.removeEnergy(2);
            this.move("left");
        } else if(maxIndex === 1) {
            this.removeEnergy(2);
            this.move("forwards");
        } else if(maxIndex === 2) {
            this.removeEnergy(2);
            this.move("right");
        } else if(maxIndex === 3) {
            this.removeEnergy(3);
            tile.addChemical(0, 10);
        } else if(maxIndex === 4) {
            this.removeEnergy(3);
            tile.addChemical(1, 10);
        } else if(maxIndex === 5) {
            this.removeEnergy(3);
            tile.addChemical(2, 10);
        } else if(maxIndex === 6) {
            this.removeEnergy(1);
            this.turn_back();
        } else if(maxIndex === 7) {
            this.removeEnergy(1);
            this.turn_left();
        } else if(maxIndex === 8) {
            this.removeEnergy(1);
            this.turn_right();
        } else if(maxIndex === 9) {
            this.removeEnergy(4);
            this.move(this.getDirectionPreferences(0, "follow", leftTile, frontTile, rightTile)[0]);
        } else if(maxIndex === 10) {
            this.removeEnergy(4);
            this.move(this.getDirectionPreferences(1, "follow", leftTile, frontTile, rightTile)[0]);
        } else if(maxIndex === 11) {
            this.removeEnergy(4);
            this.move(this.getDirectionPreferences(2, "follow", leftTile, frontTile, rightTile)[0]);
        } else if(maxIndex === 12) {
            this.removeEnergy(4);
            this.move(this.getDirectionPreferences(0, "avoid", leftTile, frontTile, rightTile)[0]);
        } else if(maxIndex === 13) {
            this.removeEnergy(4);
            this.move(this.getDirectionPreferences(1, "avoid", leftTile, frontTile, rightTile)[0]);
        } else if(maxIndex === 14) {
            this.removeEnergy(4);
            this.move(this.getDirectionPreferences(2, "avoid", leftTile, frontTile, rightTile)[0]);
        }
        this.removeEnergy(1);
    }

    makeOffspring() {
        const result = new Ant(this.hill);
        this.hill.livingAnts++;
        result.brain.parseParameters(getMutatedParameters(this.brain));
        this.hill.ants.push(result);
    }

    removeEnergy(quantity) {
        if(this.alive === false) { return; }
        if(this.energy - quantity <= 0) {
            this.energy = 0;
            this.die();
        } else {
            this.energy -= quantity;
        }
    }

    die() {
        const tile = getTile(this.position.x, this.position.y);
        tile.ant_number -= 1;
        this.alive = false;
        tile.addFood(this.food_carried);
        this.hill.livingAnts--;
    }
}

const GOLDEN_PARAMETERS = [
    0.35065937166162825,
    -0.8193256621964589,
    -0.5855788330378888,
    -0.13481822385012898,
    0.2344555978439276,
    -0.39610299287308787,
    0.7051790779017741,
    -1.0081448676957452,
    0.6990326046288692,
    0.3174387454613521,
    -0.5174120546089408,
    0.9844693259957197,
    0.4779702001955687,
    0.9621864615577471,
    -0.25186759896816274,
    0.4404529693640909,
    0.5527543258903003,
    0.4822033044597841,
    0.7314850330719778,
    -0.3290457878931089,
    -0.7933779036830368,
    -0.6115606103916258,
    0.6044891795122816,
    0.6501606539419272,
    -0.9505810650631952,
    -0.44299977004175345,
    0.9124482080905124,
    0.6870842385514804,
    0.5279410667962494,
    -0.7393914718718949,
    -0.2413695283236222,
    0.6767841730631644,
    -0.05003607179241545,
    -0.4943779904985585,
    0.8153677766504946,
    -0.1951410867547262,
    -0.9919338448337623,
    -0.01754744658229223,
    -0.8085877521028899,
    0.4128258846276911,
    -0.7454171618891613,
    0.5876375548577577,
    -0.1151915908837177,
    0.6917146240689765,
    0.3737702078247242,
    -0.8778944335073086,
    -0.5338539924817264,
    0.787959600217869,
    0.16552101076914794,
    -0.8495982063655786,
    0.5990271743314919,
    -0.6389667592121391,
    -0.46395114322772746,
    -0.7256264227067144,
    0.5829785516096865,
    -0.731460895913754,
    -0.6711472813957973,
    -0.7016342491998613,
    0.8421028365602915,
    -0.4999810015053873,
    -0.945038270994096,
    0.369122047295147,
    0.8044726855132184,
    -0.909035542977665,
    -0.47933196259054295,
    0.12511462719207864,
    -0.6828323161789127,
    0.9014384796113739,
    0.6843984651115596,
    0.5737496504825707,
    0.9363033144651444,
    0.22064469635332512,
    -0.49113580104530735,
    -0.3856090783291856,
    0.574471648240738,
    -0.7068261705092725,
    -0.392729627667159,
    0.38372833944300255,
    -0.8424755857548247,
    -0.09816918218537057,
    0.10266172620232086,
    -0.5261605669250696,
    -0.36533754503669863,
    -0.9856902060932825,
    -0.7914743940942276,
    -0.6136451074159115,
    -0.7077797050295501,
    0.5522362438678026,
    0.3250430853210675,
    -0.6950271169094306,
    0.8855883631644226,
    0.8033715249566997,
    -0.6391001480458045,
    0.9233362860377055,
    0.4958259179825076,
    0.9281723077938074,
    -0.365883050602557,
    -0.7360970250484987,
    -0.3105620449817789,
    0.5069312884579669,
    -0.2197469709865888,
    0.5086754974340244,
    0.7618227754398208,
    -0.6966461063770467,
    -0.7474889161372157,
    -0.3574901209384643,
    0.9739273836464151,
    -0.003703397758097899,
    0.5016852578216645,
    0.7062137724341155,
    -0.11661661616053612,
    0.12527514546344215,
    -0.8518642905604882,
    -0.13373337892192258,
    -0.36738821748925693,
    0.5490727749019436,
    0.03729076998341811,
    0.4405634777950902,
    0.5737286239864104,
    -0.07324428640917151,
    -0.4960289728432742,
    0.5849762162321717,
    -0.6299097822809288,
    -0.22565240135425288,
    -0.045910167322572686,
    -0.5089517985553385,
    -0.10804581898495025,
    -0.1443005200980704,
    -0.37206959974421716,
    0.7752355551793181,
    -0.2684715169841447,
    -0.8593893786565414,
    -0.5755800891454125,
    0.0954579326136029,
    -0.8322581021332629,
    -0.39808352464455554,
    0.11007205790291334,
    -0.5212825097952616,
    -0.9261215229148757,
    -0.6101318801686004,
    -0.9056016080302985,
    0.848445284191074,
    0.11722583408720726,
    0.13360747654132843,
    0.43628607542515296,
    -0.1559416098387569,
    0.2610069489730006,
    0.48133822200396387,
    -0.8522539433286279,
    0.43773569638454884,
    -0.17935928307122118,
    -0.8562375717240718,
    -0.1870411455639843,
    -0.10591636255289733,
    -0.4140773035684966,
    0.987146361275468,
    0.8513088515060694,
    -0.08795435941054351,
    -0.05773830830799579,
    0.18690119141798361,
    0.24832342512429037,
    -0.33724286302404427,
    -0.015134660863642508,
    0.1885813184133384,
    -0.29612763097516465,
    -0.030473568880149765,
    -0.6521065415712808,
    0.7557637556433667,
    -0.8904221574191422,
    -0.8441542936412074,
    0.5156625179121851,
    0.5259992092923834,
    0.46511929112122236,
    -0.27182845345212986,
    -0.7591534751471234,
    -0.5357845713592241,
    0.354727258389259,
    0.21374429012736446,
    0.23772994064251127,
    0.5633308559688349,
    0.3869440227705925,
    0.5761538570855232,
    0.05990899743582187,
    -0.9613353287519752,
    0.6219208822438014,
    -0.23938254949925725,
    0.13571695498626907,
    -0.30091106566073467,
    0.6919883055391907,
    0.9567844647945505,
    0.5069082499819783,
    0.884454812774325,
    0.6882456293847048,
    0.9561785111739951,
    0.5851452151067813,
    0.14202207731604238,
    0.26984588302591633,
    0.8583483200366211,
    -0.3025414664634585,
    0.31101541707638614,
    0.22210281520238798,
    -0.8520055453605825,
    -0.9086710689145855,
    -0.9885979680285412,
    0.38485096297499316,
    0.09710692886281279,
    -0.4258531140190124,
    -0.16190663267525499,
    -0.5419742640600071,
    0.41198200014719305,
    0.2656827570538394,
    -0.8064518250590808,
    0.5231269690542675,
    -0.5312205000148893,
    0.13206460389256613,
    -0.2556157571468916,
    -0.15680368372248396,
    0.3228671149865706,
    -0.2596825790089903,
    -0.24415979277704827,
    -0.16159773591680568,
    -0.8659010093636761,
    -0.06421374547885605,
    -0.672581936148157,
    -0.9332513227349146,
    0.015375339378269171,
    0.30126893598569665,
    0.49792501030582975,
    0.9976778525764648,
    -0.49827002243124807,
    0.5516723340092886,
    0.41396208899373516,
    -0.4543721440547035,
    -0.35308552057518033,
    -0.8761970975025635,
    0.2008196938981449,
    0.2180236986436492,
    -0.09580553058690958,
    -0.6029586622969784,
    0.5570843334483655,
    0.6467522538230817,
    -0.5028406560170617,
    -0.6620133565224315,
    0.6294728386634527,
    -0.3031022450409991,
    -0.8904582558764481,
    0.8994979108302965,
    0.123627554066862,
    -0.9238046273336447,
    0.7577581047956629,
    -0.1800506355483994,
    -0.6778176686250812,
    0.07888988480489394,
    -0.08201111837177058,
    -0.35977357452688297,
    0.7395361030232499,
    0.4445595603321537,
    -0.019038833059330885,
    -0.48774067106109903,
    0.7014789991653541,
    -0.04930325059568325,
    -1.0092973401762053,
    0.9845675323896349,
    -0.43222545710008226,
    0.5909478627156408,
    -0.7645011237929106,
    0.3463027984016305,
    0.1833892677702183,
    0.6917267638003315,
    -0.3814204860362165,
    0.6091606880750877,
    0.5304774397615939,
    -0.8393058380777483,
    -0.1069694884318303,
    -0.42392849614060446,
    0.7694804357557928,
    0.15267744547319095,
    -0.15563088776931636,
    0.9454369424011455,
    -0.0475040900358909,
    -0.8495670370390842,
    0.16541784266674112,
    0.5684218410073186,
    -0.25168891910095714,
    -0.6709037410710909,
    0.4198579795392079,
    0.13696831615393926,
    0.3572438660883477,
    0.475876589530084,
    0.24431082943506827,
    0.6593239520997315,
    0.6789691188344634,
    0.4813564168627455,
    -0.05987600063209115,
    -0.1851217011277917,
    -0.25067552846631186,
    -0.493838281128064,
    -0.15965055044085616,
    0.8762002253750748,
    -0.777881117477359,
    0.6354022005161609,
    0.8289778897621383,
    0.19867585982599723,
    0.7180687813961499,
    -0.7434232056005403,
    -0.7366250912406899,
    0.748884984780281,
    -0.8709314064904978,
    -0.6210167869916272,
    -0.6455125870314046,
    -0.8450614937893594,
    -0.039818231234037896,
    -0.3623349886677885,
    -0.19281081863629426,
    0.06629684074128167,
    0.6663761542219342,
    0.18639501408917317,
    0.6246602804766802,
    0.7735234998867326,
    -0.33186489077850917,
    -0.8311104703409561,
    0.7144746743424695,
    0.8749927693420245,
    -0.08751598501547558,
    -0.25945322425283857,
    0.5154405588865636,
    0.9897824571540382,
    -0.5175291346278367,
    -0.21527583007719378,
    -0.186558943003084,
    0.5808723611057576,
    0.8433566262303143,
    -0.8529237110894143,
    0.38822312644762447,
    -0.6692670772513778,
    0.4857529241854207,
    0.8201116764607509,
    -0.9834426110696707,
    0.9715818376554683,
    0.26458310031756344,
    0.8099293264436013,
    -0.9054038459149656,
    0.6856075553522636,
    -0.45681739986308695,
    -0.30866930577609036,
    0.2235374930357505,
    -0.6086570960541886,
    0.6526209434170497,
    0.30987580327380637,
    -0.590310034960229,
    0.47027782996237244,
    -0.8811783689661328,
    -0.6794561847497514,
    0.9861912958551328,
    0.12311214211979048,
    0.7259407737076541,
    0.3344031813336116,
    0.8098115973125384,
    -0.8133661262241594,
    -0.659003244827778,
    -0.714273492565839,
    -0.5945123420949215,
    0.12607549264277154,
    -0.31667985511087515,
    0.011606311994634006,
    0.8710300505883042,
    0.4551605708260112,
    -0.2482297409605796,
    -0.34171642997035623,
    0.4703452382208833,
    -0.7095878085669262,
    -0.9153314136240978,
    0.08832695935412646,
    -0.33085439791474247,
    -0.6430999145986654,
    -0.3844279034207387,
    -0.2683004442031778,
    -0.14128631743354703,
    0.6288520627571852,
    -0.7341002118737587,
    0.47725785486676064,
    -0.9288309203238135,
    -0.14837235763935636,
    0.837140485395248,
    -0.7259001276570376,
    -0.0801708223994638,
    -0.76627298443379,
    0.8600101193678039,
    0.308005615874246,
    -0.6642680344664706,
    0.4045974402484183,
    -0.44532560434718527,
    -0.8763016234676179,
    0.8619192617314709,
    -0.7298213673793867,
    -0.30777370101131696,
    0.7358640080846527,
    0.92634091687226,
    0.7103426819390439,
    0.21031464323053486,
    -0.6112963132615058,
    -0.2805009694771948,
    -0.05140369367467284,
    0.8825205420574485,
    0.1041939733744914,
    -0.5911475797516288,
    0.270314167677192,
    -0.5358691973607325,
    -0.6085208516094481,
    0.0883164075031863,
    0.8462022404829097,
    -0.1574423504595133,
    -0.371362365612195,
    0.06489018337525446,
    -0.88450254500697,
    -0.5119937200849447,
    0.9028916379887921,
    -0.8408265359343795,
    0.7901830054492762,
    0.9711865096276469,
    0.45295167073419645,
    -0.6370577439136307,
    0.037237611662617874,
    -0.19954890002544617,
    0.653047502745589,
    -0.8515212175755588,
    -0.5775256323389186,
    0.7917231182844876,
    -0.970510262954733,
    0.7760309003407418,
    -0.6445078316484304,
    -0.008487223204896775,
    -0.2277608750532829,
    -0.9943124556868977,
    -0.6875353132341057,
    -0.9083527494859727,
    0.421150274513247,
    0.7854743067345988,
    0.36196174428723493,
    -0.3658412869657083,
    0.6797500542512198,
    0.21716157468636335,
    0.9933144375901116,
    0.9534362515055534,
    -0.9835765396822088,
    0.6096864386432872,
    0.0704552420769214,
    -0.9292834297577129,
    0.4131412012421763,
    0.51771828753532,
    0.35781903148684197,
    -0.1041864260354301,
    -0.08375939558553636,
    0.1427736477751878,
    0.6347457229983982,
    -0.005533218399520777,
    -0.9961915490856421,
    -0.23913864409566157,
    0.43162015097625894,
    0.2653006075712008,
    -0.7210345124746285,
    -0.18971560553648514,
    -0.9796426035760197,
    -0.8699820450354935,
    -0.6730188622629383,
    -0.2658175930434818,
    0.5871999417599616,
    -0.7578815771467965,
    0.12417174060847365,
    -0.6362443633280339,
    -0.9429594328256022,
    0.08209744288453986,
    0.9065014131030392,
    -0.26603306695701767,
    -0.7687545747017663,
    -0.020899037145837473,
    0.597606231890515,
    0.4175667791273784,
    0.6341720814038551,
    -0.15600267288737088,
    -0.7613179360630388,
    -0.08059673302758534,
    0.5742350990498319,
    -0.580631347149408,
    -0.046471058846227174,
    0.18142988709190705,
    -0.6143780058558421,
    -0.6853443749646446,
    -0.03644277907257095,
    0.6920375564493816,
    0.5111009802783198,
    -0.3679999381683124,
    -0.5781924043947281,
    -0.8244088040811641,
    0.43334769951810304,
    -0.8392188071330097,
    -0.3293329734175387,
    -0.35744363444846106,
    -0.6351955258084968,
    0.671376026788495,
    -0.013470005267036138,
    -0.4342246697736418,
    -0.724996790512987,
    -0.7444663725663331,
    -0.4842411835221095,
    0.4070935003167066,
    -0.4316066242842868,
    -0.5777594950693034,
    0.8326799937532906,
    0.3851969718114364,
    0.24815112296448383,
    0.8259718267575276,
    0.9842606779257674,
    0.13275573456694334,
    0.00010442137914633298,
    -0.4130423241132494,
    -0.0934546378960075,
    0.6147228530934704,
    0.7583883730234132,
    0.5438011217534092,
    0.278055656557238,
    0.1900866378975959,
    0.7571045311682837,
    -0.955043932690251,
    0.7258624370941325,
    -0.3736099069361328,
    0.7424463378342527,
    0.9303118807679103,
    0.02823260263637925,
    0.3201952063650232,
    0.5533799941005046,
    0.819167926196652,
    0.8088019828007335,
    0.0231136896324242,
    0.8309613407206916,
    0.6912489671117347,
    0.1399926166930325,
    -0.8979051425810215,
    -0.8038486744031479,
    0.7612810849737577,
    -0.85282221083775,
    -0.7500119927493729,
    -0.1275937736222838,
    0.6360984874901338,
    -0.24958824108373445,
    0.8481778629869123,
    -0.8346387929785593,
    -0.3039680305456611,
    -0.8130447428249216,
    -0.8674388979602955,
    -0.7344456924570618,
    -0.1723331331093738,
    0.23233101915791182,
    -0.5311575670873091,
    0.16702493372383168,
    -0.7030610034902245,
    -0.8629836941403378,
    -0.17848023169567054,
    0.28313273547823825,
    0.42491126925169465,
    0.6609113382067756,
    -0.30061946106664994,
    -0.11879517962770353,
    0.6375570648907987,
    0.4079456201431189,
    -0.6826082655568917,
    -0.9678087991770049,
    0.5983728612713837,
    0.21817091630396185,
    -0.7699517252889828,
    -0.9083221889947652,
    -0.7924579439263872,
    -0.5859076769661062,
    0.9756155080664185,
    -0.4235588077673071,
    -0.5300508244775486,
    0.22324143634822458,
    1.248346803175432,
    0.9702476046239233,
    0.40695289578055655,
    1.5293804270444538,
    0.6567686406843236,
    1.3982023938513135,
    0.23477528692076544,
    0.4731368303809832,
    0.23210084936497066,
    0.42515923041161446,
    1.5374878487832853,
    1.919741017361544,
    1.640122287655587,
    1.0585280880958023,
    0.12119650145268834,
    0.7799811519561127,
    0.07932208217650236,
    1.2983413064237255,
    0.17025905020463625,
    1.4038576792391801,
    0.469754635186029,
    0.03749842688471321,
    0.7908755229184279,
    0.35514648002608845,
    0.5790151262121861,
    0.18167345548625652,
    1.549673764895807,
    0.06038793311109878,
    1.0926799053785536,
    1.9571987673932993,
    0.6643636361032335,
    0.35893107714525513,
    -0.9342297118417824,
    0.3301393457968358,
    0.5732668741522442,
    -0.5851060294904504,
    0.5845960268327991,
    0.9934974507715342,
    -0.28578553526484096,
    -0.321930244492662,
    0.055529427080545646,
    0.3332500292351403,
    0.40875113682145636,
    0.5891318198918161,
    0.17525071020925564,
    0.7129686656885398,
    0.011309087979787448,
    -0.5738203083235088,
    -0.5649190137936494,
    0.8486458187186108,
    -0.7643279282867053,
    0.17011830691912386,
    0.009481726701880655,
    0.3801368635046702,
    -0.5001793590540247,
    0.3648411629480211,
    0.7731545406753603,
    -0.40493634541271867,
    0.1062731218036293,
    0.5801270220284087,
    -0.8304685139546933,
    0.4472782453351969,
    0.2516067926974462,
    -0.3098334909396719,
    0.35363916765879644,
    -0.8090198724695001,
    -0.07932510997940995,
    0.1397419050168568,
    -0.018434148516554075,
    0.8427045129739527,
    0.6786294218879604,
    0.7948608241672189,
    0.5507990892211231,
    0.959130216252529,
    0.3534626994105877,
    0.2836138127001926,
    -0.2626265440323137,
    0.8477358237106499,
    -0.1807002926202728,
    -0.8354666254164999,
    -0.7653668354612844,
    -0.42089914101561,
    -0.20928607914537964,
    0.031471037552879506,
    -0.3789375753270059,
    -0.8517948824750693,
    0.7658715609410504,
    -0.9070957804624374,
    0.6290077596593393,
    -0.4539261544540539,
    0.506098481368512,
    -0.7853559626228207,
    -0.2041695547952899,
    0.42627627618192554,
    0.6558289331912657,
    0.7418118958860078,
    0.461871748689794,
    -0.7579199405437803,
    0.9377977693820496,
    -0.8612515601263929,
    -0.055203721474516916,
    -0.6375179216296822,
    0.09964110340075702,
    -0.9197101001895086,
    0.2579050773732346,
    0.5475040262929965,
    -0.31703366031179664,
    -0.9973465702146052,
    0.03744991012699635,
    0.3281110671529965,
    -0.9169907072424492,
    0.5515749391594024,
    -0.03690781941157537,
    -0.883538057718955,
    0.004742720199503394,
    -0.588094248321985,
    0.24584611547464424,
    0.803610095033816,
    -0.32451764755486134,
    0.09507925181671105,
    -0.1907900474248104,
    -0.9821829711847853,
    0.6585942239821156,
    0.6138715485025377,
    -0.14285886575679904,
    -0.889692612618765,
    -0.9550682507916304,
    0.33266764297011897,
    -0.1511314430951788,
    0.48294505809273114,
    -0.10773092661327598,
    0.6378811461117483,
    0.8232303371134762,
    -0.0876920288356646,
    -0.5072240582832916,
    -0.9695458331737431,
    -0.09303980971386282,
    -0.5326501230980702,
    -0.2912775845206156,
    -0.2519521487414384,
    -0.15548679850936314,
    0.9157517351082979,
    0.9303419561811216,
    -0.7386969828187365,
    0.39552053569883666,
    0.6103023584535908,
    -0.5560474763892778,
    0.4658392643660907,
    -0.1237846643211565,
    0.9164202286554216,
    -0.5253396861533496,
    -0.3643836823869247,
    0.7605483644714223,
    0.28885674785139337,
    0.32095823146609487,
    -0.14534127578068698,
    -0.7703977692973555,
    0.867619844916981,
    0.7442178432965761,
    -0.9220807005297723,
    0.8415195701867791,
    0.8980081642856942,
    -0.4803359374253912,
    -0.4398420651383399,
    0.2770703061614172,
    -0.5911900295365945,
    0.6753095939444349,
    0.3692224184279461,
    0.7587177235178881,
    0.11905751682577428,
    -0.986039801198889,
    -0.1315096053652014,
    0.41557441041112825,
    -0.36582232587506097,
    -0.04099586307211274,
    0.682815482894904,
    -0.9508752757375174,
    -0.1847719486079086,
    0.5884305810089857,
    0.7365313663119695,
    -0.8312290503278491,
    -0.398524781884646,
    -0.24963451519070817,
    -0.28237583262717075,
    0.05185607231472005,
    0.20780419511313333,
    -0.36569724033718815,
    -0.08675191784733234,
    0.6162581255619949,
    0.8442459349304361,
    -0.20675154826303693,
    0.5980295364982487,
    -0.0779221060844558,
    -0.4892437878847727,
    0.796947535289537,
    0.6606090532949195,
    0.18389011101580638,
    -0.23172600821778494,
    -0.13537591016265318,
    0.08825446636614782,
    -0.9747141250145533,
    -0.8752433273326596,
    0.8009589393459947,
    0.4328563626708904,
    0.0825022735982258,
    -0.17279462382813382,
    0.7959172012520346,
    -0.012444539520694086,
    -0.1777641218340094,
    0.6849286047046357,
    -0.2487603837852152,
    -0.3996947956539589,
    0.330965020211517,
    -0.537389807022821,
    -0.9839503544700411,
    0.09788566523310566,
    0.015726013028707304,
    0.022669888457952928,
    -0.36284957665908013,
    -0.24256069358408852,
    -0.1810533888008766,
    -0.7403033173316141,
    -0.9165391139337241,
    -0.15291517197372115,
    -0.10467681613655985,
    0.6586154965445269,
    -0.474604445021709,
    -0.6368932750401615,
    -0.7877508575477382,
    0.44318125946826076,
    0.8210601993516564,
    -0.549684669068654,
    -0.23384080167563256,
    0.4615791705682075,
    0.511642116821235,
    -0.6262923298476561,
    0.589097792693677,
    0.8091110493299165,
    -0.5446500668613099,
    -0.20568780154909175,
    -0.2045362667791021,
    -0.8540983899508585,
    -0.705492587719794,
    0.49691547844679157,
    0.9123210292624362,
    -0.019571140973006995,
    -0.6858467002323265,
    -0.15925203190764406,
    0.6745402632774876,
    0.26185867117787726,
    -0.22076657023196178,
    0.9623140789964748,
    0.7843845646867752,
    -0.18747887538250588,
    0.42085041519725,
    -0.390040170055006,
    0.16800282276461811,
    -0.9541359089768673,
    0.04986470617293077,
    -0.6878623854671156,
    0.5000580576074902,
    -0.44476425583349716,
    0.688259520516352,
    -0.8996163110570612,
    0.9729217107337716,
    0.23633493784492693,
    0.38160886271735767,
    -0.8965519804611597,
    0.9886121057267081,
    0.11326733124982243,
    -0.8368618639825788,
    -0.4028609346682273,
    -0.4290072974832744,
    0.8156596635812381,
    0.346299584398147,
    0.39528268150320434,
    0.5011942165583366,
    0.8109905572096119,
    -0.25013409552453353,
    0.638603827206851,
    -0.17490493865842546,
    -0.2190371445830442,
    0.8710708802833012,
    -0.20574745766614744,
    -0.06144789738164268,
    -0.21502762544884302,
    0.30872409606931933,
    0.1435186604889572,
    -0.3440127398799492,
    0.4201443255780628,
    -0.2948995328043549,
    -0.6993852452301358,
    0.8919220328210152,
    0.7098231305578612,
    -0.29438801831165234,
    -0.9490088621860909,
    -0.1929750394147102,
    -0.8521806760704981,
    0.9816206962991921,
    -0.006096938367108332,
    -0.8892337384300915,
    0.4592323274161018,
    -0.9868737067692422,
    -0.39604180901206565,
    -0.7267745220379125,
    0.15618463437160465,
    -0.5166700166632002,
    -0.3318781412362571,
    0.128874133950388,
    0.8635458143620262,
    -0.9671095017299899,
    0.11803545441598493,
    0.659033218406172,
    -0.6525584142435494,
    0.9187051927264752,
    -0.6302275553443077,
    -0.6025488850319669,
    0.14777741428971794,
    0.09570763491086871,
    1.3618096754891456,
    1.620576338676259,
    0.8649091564737179,
    0.04253539019732036,
    0.5147298182856038,
    0.12728283321109335,
    1.1343762267772637,
    1.949401744436997,
    0.29691400285727043
];  // REQUIRES STRUTURE: [18, 32, 9]

let initialPopulation = 5;

class Colony {
    position;

    ants;
    livingAnts;
    constructor(x, y) {
        this.position = new Vector2D(x, y);
        this.ants = [];
        this.livingAnts = 0;
        const queen = new Ant(this);
        // queen.brain.parseParameters(GOLDEN_PARAMETERS);       // OPTIONAL: always start form a good colony
        for(let i = 0; i < initialPopulation; i++) {
            queen.makeOffspring();
        }
    }

    removeCorps() {
        let new_ants = [];
        for(let i = 0; i < this.ants.length; i++) {
            const ant = this.ants[i];
            if(ant.alive) { new_ants.push(ant); }
        }
        this.ants = new_ants;

        const ants_to_remove = this.ants.length - MAX_ANTS;
        for(let i = 0; i < ants_to_remove; i++) {
            this.ants[this.ants.length - 1].die();
            this.ants.pop();
        }
        this.livingAnts = this.ants.length;
    }
}